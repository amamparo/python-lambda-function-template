name: Check

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.get-python-version.outputs.version }}
      cache-key: ${{ steps.generate-cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get Python version
        id: get-python-version
        run: |
          PYTHON_VERSION=$(cat .python-version)
          echo "version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}
      
      - name: Generate cache key
        id: generate-cache-key
        run: |
          echo "key=venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-python-${{ steps.get-python-version.outputs.version }}" >> $GITHUB_OUTPUT
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Create activation script
        run: |
          echo '#!/bin/bash' > activate_venv.sh
          echo 'export VIRTUAL_ENV="${GITHUB_WORKSPACE}/.venv"' >> activate_venv.sh
          echo 'export PATH="${VIRTUAL_ENV}/bin:${PATH}"' >> activate_venv.sh
          echo 'echo "Virtualenv activated. Python: $(which python)"' >> activate_venv.sh
          chmod +x activate_venv.sh
      
      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            activate_venv.sh
          key: ${{ steps.generate-cache-key.outputs.key }}

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Run linting
        run: |
          export PATH="$GITHUB_WORKSPACE/.venv/bin:$PATH"
          which python
          python --version
          pylint src tests aws